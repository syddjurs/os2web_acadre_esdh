<?php

/**
 * @file
 * This module implements Acadre ESDH backend for use in os2web
 */

include_once('os2web_acadre_esdh.features.inc');

define('ACADRE_MM_IMPORT_DIR', 'public://acadre');
define('ACADRE_MM_DEFAULT_APPROVED', '62,59,64,53,54,56,57,63,58,51,55,61,68,69,42');

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Register as provider of esdh plugins
 */
function os2web_acadre_esdh_ctools_plugin_directory($module, $plugin) {
  if ($module == 'os2web_esdh_provider') {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_form_alter().
 *
 * Add configuration to the settings form.
 */
function os2web_acadre_esdh_form_os2web_settings_settings_form_alter(&$form, &$form_state) {
  // MM configuration.
  $form['meetings'] = array(
    '#type' => 'fieldset',
    '#title' => 'Referat import',
    '#description' => 'Indstillinger der vedrÃ¸rer importen af Acadre referater og dagsordener.',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['meetings']['os2web_meetings_path'] = array(
    '#type' => 'textfield',
    '#title' => 'Sti til acadre publish folder.',
    '#description' => 'Dette er stien hvor Acadre publisere .XML filer til.',
    '#default_value' => variable_get('os2web_meetings_path', ACADRE_MM_IMPORT_DIR),
  );
  $form['meetings']['os2web_meetings_approved_committee'] = array(
    '#type' => 'textfield',
    '#title' => 'Godkendte Udvalg',
    '#maxlength' => 200,
    '#description' => 'Komma sepereret liste over udvalgs-id der er godkendt til publisering.',
    '#default_value' => variable_get('os2web_meetings_approved_committee', ACADRE_MM_DEFAULT_APPROVED),
  );

  // CM Configuration.
  $form['os2web_pws_config_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('PWS Endpoint configuration'),
  );
  $form['os2web_pws_config_group']['os2web_pws_url'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_url'),
    '#title' => t('PWS URL for V4'),
    '#description' => t('URL to the PWS webservice endpoint.'),
  );
  $form['os2web_pws_config_group']['os2web_pws_url_v6'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_url_v6'),
    '#title' => t('PWS URL for  V6'),
    '#description' => t('URL to the PWSv6 webservice endpoint.'),
  );
  $form['os2web_pws_config_group']['os2web_pws_url_search'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_url_search'),
    '#title' => t('PWS URL for Search service'),
    '#description' => t('URL to the webservice endpoint that runs the search service.'),
  );
  $form['os2web_pws_config_group']['os2web_pws_user'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_user'),
    '#title' => t('PWS login user'),
    '#description' => t('PWS HTTP authentification user.'),
  );
  $form['os2web_pws_config_group']['os2web_pws_password'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_password'),
    '#title' => t('PWS password'),
    '#description' => t('PWS HTTP authentification password.'),
  );
  // Proxy setups
  $form['os2web_pws_proxy_group'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => !variable_get('os2web_pws_proxy'),
    '#title' => t('Proxy configuration'),
    '#weight' => 10,
  );
  $form['os2web_pws_proxy_group']['os2web_pws_proxy'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('os2web_pws_proxy'),
    '#title' => t('Use proxy?'),
  );
  $form['os2web_pws_proxy_group']['os2web_pws_proxy_host'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_proxy_host'),
    '#title' => t('Proxy hostname or IP'),
  );
  $form['os2web_pws_proxy_group']['os2web_pws_proxy_port'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_proxy_port'),
    '#title' => t('Proxy port number.'),
  );
  $form['os2web_pws_adlib_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Adlib Endpoint configuration'),
  );
  $form['os2web_pws_adlib_group']['os2web_adlib_url'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_adlib_url', 'http://706CAR01/ExponentWSA/ExponentWSA.asmx?wsdl'),
    '#title' => t('URL for Adlib service endpoint'),
    '#description' => t('URL to the webservice endpoint that runs the Adlib service.'),
  );
}

/**
 * Implements hook_os2web_help().
 */
function os2web_acadre_esdh_os2web_help($sections) {

  // Content types.
  $sections['configuration'] = t('<p>Configure PWS and resume import in the <a href="@url" target="_blank">OS2web Configuration</a><br /><i>This requires some insight in the server setup and the data recieved.</i><br />Setup the required endpoints, path to the published XML files from acadre and the authentication user/pass for accessing the PWS endpoints.</p>', array('@url' => url('admin/config/os2web/settings')));
  $sections['configuration'] .= t('<p><a href="@url" target="_blank">See the advanced documentation for acadre</a></p>', array('@url' => url('admin/help/os2web_acadre_esdh')));
  return $sections;
}

/**
 * Implements hook_node_insert().
 */
function os2web_acadre_esdh_node_insert($node)
{
  if(!empty($node->field_os2web_base_field_case)) {
    _os2web_acadre_esdh_update_cm_documents_from_pws($node);
  }
}

/**
 * Implements hook_node_update().
 */
function os2web_acadre_esdh_node_update($node)
{
  if(!empty($node->field_os2web_base_field_case)) {
    _os2web_acadre_esdh_update_cm_documents_from_pws($node);
  }
}

/**
 * Helper function to call the PWS and put documents in queue for updates.
 *
 * @param  Object $node
 *   The node.
 */
function _os2web_acadre_esdh_update_cm_documents_from_pws($node) {
  // Check for correct api and required functions are implemented.
  if (!os2web_esdh_provider_has_api('cm')) {
    return;
  }

  $cases = explode(',', $node->field_os2web_base_field_case[LANGUAGE_NONE][0]['os2web_esdh_field_case_ident']);
  $documents = explode(',', $node->field_os2web_base_field_doc[LANGUAGE_NONE][0]['os2web_esdh_field_doc_ident']);
  foreach ($cases as $key => $case_id) {
    try {
      $case = os2web_esdh_provider_invoke('cm', 'get_case_data', $case_id);

      if (!$case) {
        // Ignore failed case lookups.
        continue;
      }

      $access_grant = array(
        'access_code' => 'KK',
        'restricted_from_public' => ACADRE_CM_ACCESS_OPEN_CASE,
      );

      if ($case['access_code'] === $access_grant['access_code'] &&
          $case['restricted_from_public'] === $access_grant['restricted_from_public']) {
        // Document has the appropiate access settings.
        $documents = array_merge($documents, os2web_esdh_provider_invoke('cm', 'get_case_docs', $case_id));
      }
    } catch(Exception $e) {
      watchdog('os2web_acadre_esdh', $e, NULL, WATCHDOG_ERROR);
    }
  }

  $documents = array_filter($documents);

  if (count($documents)) {
    $query = db_insert('os2web_acadre_esdh_cm_documents')->fields(array('did', 'job_info'));
    foreach ($documents as $document_id) {
      $query->values(array(
        'did' => $document_id,
        'job_info' => 'update'
      ));
    }
    $query->execute();
  }
}

/**
 * Implements hook_cron().
 */
function os2web_acadre_esdh_cron() {

  $queue = DrupalQueue::get('os2web_acadre_esdh_cm_doc_queue');

  if ($queue->numberOfItems() == 0) {
    $query = db_select('os2web_acadre_esdh_cm_documents', 'd')->fields('d');
    $documents = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    foreach ($documents as $document) {
      $queue->createItem($document);
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function os2web_acadre_esdh_cron_queue_info() {
  $queues['os2web_acadre_esdh_cm_doc_queue'] = array(
    'worker callback' => '_os2web_acadre_esdh_update_document',
  );
  return $queues;
}

/**
 * Cron worker function to update a document from Acadre PWS.
 * @param  array $document
 *   The document
 */
function _os2web_acadre_esdh_update_document($document) {
  if (isset($document['did'])) {

    $doc = os2web_esdh_provider_invoke('cm', 'get_document', $document['did']);
    if (_os2web_esdh_field_doc_access($document['did'])) {
      // Only show public documents.
      if (($doc !== FALSE) && _os2web_esdh_field_case_access($doc['case_reference'])) {
        os2web_esdh_provider_invoke('cm', 'get_document_file', $document['did']);

        db_delete('os2web_acadre_esdh_cm_documents')
          ->condition('did', $document['did'])
          ->execute();

        watchdog('os2web_acadre_esdh', 'Document (did: %did) was converted updated from Acadre.', array('%did' => $document['did']), WATCHDOG_INFO);
      }
    }
  }
}
